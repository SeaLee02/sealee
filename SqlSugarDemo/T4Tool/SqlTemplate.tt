<#+
    // <copyright file="SqlTemplate.tt" company="李海@中国">
    //  Copyright © 李海@中国. All Rights Reserved.
    // </copyright>

    public class SqlTemplate : CSharpTemplate
    {
        private DbTableInfo _model;
        private SqlSugarClient _db;
        public SqlTemplate(DbTableInfo model,SqlSugarClient db)
        {
            _model = model;
            _db=db;
        }

        private string GetIsNull(bool isB)
        {
            if(isB){
                return "?";
            }else{
                return "";
            }
        }

        private string GetIsNull(bool isB,string type)
        {
            if(isB&&type!="string"){
                return "?";
            }else{
                return "";
            }
        }

        private string IsNull(object obj)
        {
            if(obj==null){
                return "";
            }else{
                return obj.ToString();
            }
        }

         private string MapCsharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csharpType = "object";
            switch (dbtype)
            {
                case "bigint": csharpType = "long"; break;
                case "binary": csharpType = "byte[]"; break;
                case "bit": csharpType = "bool"; break;
                case "char": csharpType = "string"; break;
                case "date": csharpType = "DateTime"; break;
                case "datetime": csharpType = "DateTime"; break;
                case "datetime2": csharpType = "DateTime"; break;
                case "datetimeoffset": csharpType = "DateTimeOffset"; break;
                case "decimal": csharpType = "decimal"; break;
                case "float": csharpType = "double"; break;
                case "image": csharpType = "byte[]"; break;
                case "int": csharpType = "int"; break;
                case "money": csharpType = "decimal"; break;
                case "nchar": csharpType = "string"; break;
                case "ntext": csharpType = "string"; break;
                case "numeric": csharpType = "decimal"; break;
                case "nvarchar": csharpType = "string"; break;
                case "real": csharpType = "Single"; break;
                case "smalldatetime": csharpType = "DateTime"; break;
                case "smallint": csharpType = "short"; break;
                case "smallmoney": csharpType = "decimal"; break;
                case "sql_variant": csharpType = "object"; break;
                case "sysname": csharpType = "object"; break;
                case "text": csharpType = "string"; break;
                case "time": csharpType = "TimeSpan"; break;
                case "timestamp": csharpType = "byte[]"; break;
                case "tinyint": csharpType = "byte"; break;
                case "uniqueidentifier": csharpType = "Guid"; break;
                case "varbinary": csharpType = "byte[]"; break;
                case "varchar": csharpType = "string"; break;
                case "xml": csharpType = "string"; break;
                default: csharpType = "object"; break;
            }
            return csharpType;
        }

        public override string TransformText()
        {
#>
namespace ModleT4
{
    using System;
    using SqlSugar;

    ///<summary>
    ///<#=IsNull(_model.Description) #>
    ///</summary>
    [SugarTable("<#=_model.Name#>")]
    public partial class <#=_model.Name.ToCase() #>
    {
           public <#=_model.Name.ToCase() #>(){

           }

<#+foreach (DbColumnInfo item in _db.DbMaintenance.GetColumnInfosByTableName(_model.Name)){#>
           /// <summary>
           /// <#=IsNull(item.ColumnDescription) #>
           /// </summary>           
           [SugarColumn(ColumnName="<#=item.DbColumnName#>",ColumnDescription ="<#=IsNull(item.ColumnDescription) #>")]
           public <#=MapCsharpType(item.DataType) #> <#= GetIsNull(item.IsNullable,MapCsharpType(item.DataType)) #> <#=item.DbColumnName.ToCase() #> {get;set;}

<#+}#>
    }
}

<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
