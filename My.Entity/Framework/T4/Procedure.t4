<#+
    // <copyright file="Procedure.tt" company="">
    //  Copyright © . All Rights Reserved.
    // </copyright>

    public class Procedure : CSharpTemplate
    {
        private DbObj _obj;
        private MyConfig _config;
        public Procedure(DbObj obj,MyConfig config)
        { 
            _obj=obj; 
            _config=config;
        }

        public override string TransformText()
        {         
#>
namespace <#=_config.NameSpace #>
{
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using My.Entity.Framework._03Pro;
    
     /// <summary>
    /// <#=_obj.ObjDesc #>
    /// </summary>
    public class <#=_obj.ObjName #> : BasePro
    {
	<#+foreach(DbObjColumn column in _obj.DbObjColumns){#>
        
        /// <summary>
        /// <#=column.ObjColumnDesc#>
        /// </summary>
        public <#=column.CShareType#> <#=column.ObjColumnName #> { get; set; } 
<#+} #>
                                               
        public override SqlParameter[] GetSqlParameters()
        {
            List<SqlParameter> parameters = new List<SqlParameter>();
<#+foreach(DbObjColumn column in _obj.DbObjColumns){#>
<#+if(!column.IsOutPut){ #>
            parameters.Add(new SqlParameter("<#=column.ObjColumnName #>", this.<#=column.ObjColumnName.Replace("@","")#>));
<#+}else{ #>
            var param<#=column.ObjColumnName.Replace("@","") #> = new SqlParameter("<#=column.ObjColumnName #>", SqlDbType.<#=StringUtil.GetUpperF(column.ObjColumnType) #>);
            param<#=column.ObjColumnName.Replace("@","") #>.Direction = ParameterDirection.Output;
            parameters.Add(param<#=column.ObjColumnName.Replace("@","") #>);
<#+} #><#+} #>
            return parameters.ToArray();
         }

        public override string GetSql()
        {
            string sql = "EXEC dbo.<#=_obj.ObjName #> ";
<#+foreach(DbObjColumn column in _obj.DbObjColumns){#>
<#+if(!column.IsOutPut){ #>
            sql += " <#=column.ObjColumnName #> =<#=column.ObjColumnName #>,";
<#+}else{ #>
            sql += " <#=column.ObjColumnName #> =<#=column.ObjColumnName #> OUT,";
<#+} #>
<#+} #>
            sql = sql.Substring(0, sql.Length - 1);
            return sql;
        }

	}
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
